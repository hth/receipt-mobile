package com.receiptofi.social.connect;

import com.receiptofi.domain.UserAccountEntity;
import com.receiptofi.domain.UserProfileEntity;
import com.receiptofi.domain.types.ProviderEnum;
import com.receiptofi.domain.types.RoleEnum;
import com.receiptofi.repository.GenerateUserIdManager;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.InvocationTargetException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Map.Entry;
import java.util.Set;

import static org.springframework.data.mongodb.core.query.Criteria.where;
import static org.springframework.data.mongodb.core.query.Query.query;

import org.apache.commons.beanutils.BeanUtils;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Sort;
import org.springframework.data.mongodb.core.MongoTemplate;
import org.springframework.data.mongodb.core.query.Criteria;
import org.springframework.data.mongodb.core.query.Query;
import org.springframework.social.connect.Connection;
import org.springframework.social.connect.ConnectionKey;
import org.springframework.social.facebook.api.Facebook;
import org.springframework.social.facebook.api.FacebookProfile;
import org.springframework.social.facebook.api.impl.FacebookTemplate;
import org.springframework.util.MultiValueMap;

import com.mongodb.WriteConcern;

public class ConnectionServiceImpl implements ConnectionService {
    private static final Logger log = LoggerFactory.getLogger(ConnectionServiceImpl.class);
    private final MongoTemplate mongoTemplate;
    private final ConnectionConverter connectionConverter;
    @Autowired
    private GenerateUserIdManager generateUserIdManager;

    @Autowired
    public ConnectionServiceImpl(MongoTemplate mongoTemplate, ConnectionConverter connectionConverter) {
        this.mongoTemplate = mongoTemplate;
        this.connectionConverter = connectionConverter;
    }

    public void create(String userId, Connection<?> userConn) {
        UserAccountEntity userAccount = connectionConverter.convert(userConn);
        userAccount.setUserId(userId);
        userAccount.setReceiptUserId(generateUserIdManager.getNextAutoGeneratedUserId());
        mongoTemplate.insert(userAccount);
    }

    public void update(String userId, Connection<?> userConn) {
        UserAccountEntity userAccountFromConnection = connectionConverter.convert(userConn);
        userAccountFromConnection.setUserId(userId);

        UserAccountEntity userAccount = getUserAccountEntity(userId, userAccountFromConnection.getProviderId(), userAccountFromConnection.getProviderUserId());
        if(userAccount != null) {
            userAccount.setExpireTime(userAccountFromConnection.getExpireTime());
            userAccount.setAccessToken(userAccountFromConnection.getAccessToken());
            userAccount.setProfileUrl(userAccountFromConnection.getProfileUrl());
            userAccount.setImageUrl(userAccountFromConnection.getImageUrl());
            userAccount.setDisplayName(userAccountFromConnection.getDisplayName());

            mongoTemplate.save(userAccount);
        } else {
            mongoTemplate.setWriteConcern(WriteConcern.SAFE);
            mongoTemplate.save(userAccountFromConnection);
        }

        Facebook facebook = new FacebookTemplate(userAccountFromConnection.getAccessToken(), "notfoundexception");
        FacebookProfile userProfile = facebook.userOperations().getUserProfile();
        saveUserProfile(userProfile, userAccount);

        List<FacebookProfile> profiles = facebook.friendOperations().getFriendProfiles();
        for(FacebookProfile facebookUserProfile : profiles) {
            UserAccountEntity userAccountEntity = mongoTemplate.findOne(Query.query(Criteria.where("UID").is(facebookUserProfile.getId())), UserAccountEntity.class);
            if(userAccountEntity == null) {
                userAccountEntity = new UserAccountEntity();
                userAccountEntity.inActive();
                //userAccountEntity.setDeleted(false);
                userAccountEntity.setReceiptUserId(generateUserIdManager.getNextAutoGeneratedUserId());
            }
            userAccountEntity.setUserId(facebookUserProfile.getId());
            userAccountEntity.setProviderId(ProviderEnum.FACEBOOK);
            userAccountEntity.setProviderUserId(facebookUserProfile.getId());

            mongoTemplate.save(userAccountEntity);
            saveUserProfile(facebookUserProfile, userAccountEntity);
        }
        log.info("Facebook Id={}", userProfile.getId());
    }

    private void saveUserProfile(FacebookProfile facebookUserProfile, UserAccountEntity userAccount) {
        UserProfileEntity userProfile = mongoTemplate.findOne(Query.query(Criteria.where("UID").is(facebookUserProfile.getId())), UserProfileEntity.class);
        if(userProfile == null) {
            userProfile = new UserProfileEntity();
        }

        try {
            String id = userProfile.getId();

            BeanUtils.copyProperties(userProfile, facebookUserProfile);
            userProfile.setUserId(facebookUserProfile.getId());
            userProfile.setProviderId(ProviderEnum.FACEBOOK);
            userProfile.setReceiptUserId(userAccount.getReceiptUserId());
            userProfile.setId(id);
            mongoTemplate.save(userProfile);
        } catch (IllegalAccessException | InvocationTargetException e) {
            log.error(e.getLocalizedMessage());
        }
    }

    public void remove(String userId, ConnectionKey connectionKey) {
        Query q = Query.query(where("UID").is(userId)
                .and("PID").is(connectionKey.getProviderId())
                .and("PUID").is(connectionKey.getProviderUserId()));
        mongoTemplate.remove(q, UserAccountEntity.class);
    }

    public void remove(String userId, ProviderEnum providerId) {
        Query q = Query.query(where("UID").is(userId).and("PID").is(providerId));
        mongoTemplate.remove(q, UserAccountEntity.class);
    }

    public Connection<?> getPrimaryConnection(String userId, ProviderEnum providerId) {
        Query q = Query.query(where("UID").is(userId).and("PID").is(providerId).and("RE").is(RoleEnum.ROLE_USER));
        UserAccountEntity mc = mongoTemplate.findOne(q, UserAccountEntity.class);
        return connectionConverter.convert(mc);
    }

    public Connection<?> getConnection(String userId, ProviderEnum providerId, String providerUserId) {
        UserAccountEntity mc = getUserAccountEntity(userId, providerId, providerUserId);
        return connectionConverter.convert(mc);
    }

    private UserAccountEntity getUserAccountEntity(String userId, ProviderEnum providerId, String providerUserId) {
        Query q = Query.query(where("UID").is(userId).and("PID").is(providerId).and("PUID").is(providerUserId));
        return mongoTemplate.findOne(q, UserAccountEntity.class);
    }

    public List<Connection<?>> getConnections(String userId) {
        // select where userId = ? order by providerId, role
        Query q = Query.query(where("UID").is(userId));
        Sort sort = new Sort(Sort.Direction.ASC, "PID").and(new Sort(Sort.Direction.ASC, "RE"));

        return runQuery(q.with(sort));
    }

    public List<Connection<?>> getConnections(String userId, ProviderEnum providerId) {
        Query q = Query.query(where("userId").is(userId).and("PID").is(providerId));
        Sort sort = new Sort(Sort.Direction.ASC, "RE");

        return runQuery(q.with(sort));
    }

    public List<Connection<?>> getConnections(String userId, MultiValueMap<String, String> providerUsers) {
        if(providerUsers == null || providerUsers.isEmpty()) {
            throw new IllegalArgumentException("Unable to execute find: no providerUsers provided");
        }

        List<Criteria> lc = new ArrayList<>();
        for(Entry<String, List<String>> entry : providerUsers.entrySet()) {
            String providerId = entry.getKey();
            lc.add(where("PID").is(providerId).and("PUID").in(entry.getValue()));
        }

        Query query = Query.query(where("UID").is(userId).orOperator(lc.toArray(new Criteria[lc.size()])));
        Sort sort = new Sort(Sort.Direction.ASC, "PID").and(new Sort(Sort.Direction.ASC, "RE"));
        return runQuery(query.with(sort));
    }

    public Set<String> getUserIds(ProviderEnum providerId, Set<String> providerUserIds) {
        Query q = query(where("PID").is(providerId).and("PUID").in(new ArrayList<>(providerUserIds)));
        q.fields().include("UID");

        List<UserAccountEntity> results = mongoTemplate.find(q, UserAccountEntity.class);
        Set<String> userIds = new HashSet<>();
        for(UserAccountEntity mc : results) {
            userIds.add(mc.getUserId());
        }

        return userIds;
    }

    public List<String> getUserIds(ProviderEnum providerId, String providerUserId) {
        Query q = query(where("PID").is(providerId).and("PUID").is(providerUserId));
        q.fields().include("UID");

        List<UserAccountEntity> results = mongoTemplate.find(q, UserAccountEntity.class);
        List<String> userIds = new ArrayList<>();
        for(UserAccountEntity mc : results) {
            userIds.add(mc.getUserId());
        }

        return userIds;
    }

    private List<Connection<?>> runQuery(Query query) {
        List<UserAccountEntity> results = mongoTemplate.find(query, UserAccountEntity.class);
        List<Connection<?>> l = new ArrayList<>();
        for(UserAccountEntity mc : results) {
            l.add(connectionConverter.convert(mc));
        }

        return l;
    }
}