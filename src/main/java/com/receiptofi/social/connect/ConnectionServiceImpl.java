package com.receiptofi.social.connect;

import com.receiptofi.domain.UserAccountEntity;
import com.receiptofi.domain.UserAuthenticationEntity;
import com.receiptofi.domain.UserProfileEntity;
import com.receiptofi.domain.types.ProviderEnum;
import com.receiptofi.domain.types.RoleEnum;
import com.receiptofi.repository.GenerateUserIdManager;
import com.receiptofi.service.AccountService;
import com.receiptofi.social.annotation.Social;
import com.receiptofi.utils.RandomString;
import net.logstash.logback.encoder.org.apache.commons.lang.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.reflect.InvocationTargetException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Map.Entry;
import java.util.Set;

import static org.springframework.data.mongodb.core.query.Criteria.where;
import static org.springframework.data.mongodb.core.query.Query.query;

import org.apache.commons.beanutils.BeanUtils;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Sort;
import org.springframework.data.mongodb.core.MongoTemplate;
import org.springframework.data.mongodb.core.query.Criteria;
import org.springframework.data.mongodb.core.query.Query;
import org.springframework.social.connect.Connection;
import org.springframework.social.connect.ConnectionKey;
import org.springframework.social.facebook.api.Facebook;
import org.springframework.social.facebook.api.FacebookProfile;
import org.springframework.social.facebook.api.Reference;
import org.springframework.social.facebook.api.WorkEntry;
import org.springframework.social.facebook.api.impl.FacebookTemplate;
import org.springframework.social.google.api.Google;
import org.springframework.social.google.api.impl.GoogleTemplate;
import org.springframework.social.google.api.plus.Organization;
import org.springframework.social.google.api.plus.Person;
import org.springframework.util.MultiValueMap;

@Social
public class ConnectionServiceImpl implements ConnectionService {
    private static final Logger log = LoggerFactory.getLogger(ConnectionServiceImpl.class);

    private final MongoTemplate mongoTemplate;
    private final ConnectionConverter connectionConverter;
    private final GenerateUserIdManager generateUserIdManager;
    private final AccountService accountService;

    @Autowired
    public ConnectionServiceImpl(
            MongoTemplate mongoTemplate,
            ConnectionConverter connectionConverter,
            GenerateUserIdManager generateUserIdManager,
            AccountService accountService
    ) {
        this.mongoTemplate = mongoTemplate;
        this.connectionConverter = connectionConverter;
        this.generateUserIdManager = generateUserIdManager;
        this.accountService = accountService;
    }

    public void create(String userId, Connection<?> userConn) {
        UserAccountEntity userAccount = connectionConverter.convert(
                userId,
                generateUserIdManager.getNextAutoGeneratedUserId(),
                userConn
        );
        UserAuthenticationEntity userAuthentication = accountService.getUserAuthenticationEntity(RandomString.newInstance().nextString());
        userAccount.setUserAuthentication(userAuthentication);
        log.info("new account created user={} provider={}", userAccount.getReceiptUserId(), userAccount.getProviderId());
        mongoTemplate.insert(userAccount);
    }

    public void update(String userId, Connection<?> userConn) {
        UserAccountEntity userAccountFromConnection = connectionConverter.convert(userId, userConn);

        UserAccountEntity userAccount = getUserAccountEntity(
                userId,
                userAccountFromConnection.getProviderId(),
                userAccountFromConnection.getProviderUserId()
        );
        if(userAccount != null) {
            userAccount.setExpireTime(userAccountFromConnection.getExpireTime());
            userAccount.setAccessToken(userAccountFromConnection.getAccessToken());
            userAccount.setProfileUrl(userAccountFromConnection.getProfileUrl());
            userAccount.setImageUrl(userAccountFromConnection.getImageUrl());
            userAccount.setDisplayName(userAccountFromConnection.getDisplayName());
            userAccount.setUpdated();

            mongoTemplate.save(userAccount);
        } else {
            UserAuthenticationEntity userAuthentication = accountService.getUserAuthenticationEntity(
                    RandomString.newInstance().nextString()
            );
            userAccountFromConnection.setUserAuthentication(userAuthentication);
            mongoTemplate.save(userAccountFromConnection);
        }

        if(ProviderEnum.valueOf(userConn.getKey().getProviderId().toUpperCase()) == ProviderEnum.FACEBOOK) {
            processFacebook(userAccountFromConnection, userAccount);
        } else {
            processGoogle(userAccountFromConnection, userAccount);
        }
    }

    private void processGoogle(UserAccountEntity userAccountFromConnection, UserAccountEntity userAccount) {
        Google google = new GoogleTemplate(userAccountFromConnection.getAccessToken());
        Person googleUserProfile = google.plusOperations().getGoogleProfile();
        copyAndSaveGoogleToUserProfile(googleUserProfile, userAccount);

        // XXX TODO page Circle to get all the users in the circle
        log.info("Google Id={}", googleUserProfile.getId());
    }

    private void processFacebook(UserAccountEntity userAccountFromConnection, UserAccountEntity userAccount) {
        Facebook facebook = new FacebookTemplate(userAccountFromConnection.getAccessToken(), "notfoundexception");
        FacebookProfile userProfile = facebook.userOperations().getUserProfile();
        copyAndSaveFacebookToUserProfile(userProfile, userAccount);

        List<FacebookProfile> profiles = facebook.friendOperations().getFriendProfiles();
        for(FacebookProfile facebookUserProfile : profiles) {
            UserAccountEntity userAccountEntity = mongoTemplate.findOne(
                    query(where("UID").is(facebookUserProfile.getId())), UserAccountEntity.class
            );
            if(userAccountEntity == null) {
                userAccountEntity = UserAccountEntity.newInstance(
                        generateUserIdManager.getNextAutoGeneratedUserId(),
                        facebookUserProfile.getId(),
                        StringUtils.EMPTY,
                        StringUtils.EMPTY,
                        UserAuthenticationEntity.blankInstance()
                );
                userAccountEntity.inActive();
                //userAccountEntity.setDeleted(false);

                UserAuthenticationEntity userAuthentication = accountService.getUserAuthenticationEntity(
                        RandomString.newInstance().nextString()
                );
                userAccountEntity.setUserAuthentication(userAuthentication);

                log.info("new account created user={} provider={}", userAccountEntity.getReceiptUserId(), ProviderEnum.FACEBOOK);
            } else {
                userAccountEntity.setUpdated();
            }
            userAccountEntity.setUserId(facebookUserProfile.getId());
            userAccountEntity.setProviderId(ProviderEnum.FACEBOOK);
            userAccountEntity.setProviderUserId(facebookUserProfile.getId());

            mongoTemplate.save(userAccountEntity);
            copyAndSaveFacebookToUserProfile(facebookUserProfile, userAccountEntity);
        }
        log.info("Facebook Id={}", userProfile.getId());
    }

    private void copyAndSaveFacebookToUserProfile(FacebookProfile facebookUserProfile, UserAccountEntity userAccount) {
        log.debug("copying facebookUserProfile to userProfile for userAccount={}", userAccount.getReceiptUserId());
        UserProfileEntity userProfile = mongoTemplate.findOne(
                query(where("UID").is(facebookUserProfile.getId())),
                UserProfileEntity.class
        );
        if(userProfile == null) {
            userProfile = new UserProfileEntity();
        } else {
            userProfile.setUpdated();
        }

        try {
            String id = userProfile.getId();

            BeanUtils.copyProperties(userProfile, facebookUserProfile);
            userProfile.setUserId(facebookUserProfile.getId());
            userProfile.setProviderId(ProviderEnum.FACEBOOK);
            userProfile.setReceiptUserId(userAccount.getReceiptUserId());
            userProfile.setId(id);
            if(userAccount.isActive()) {
                userProfile.active();
            }

            if(!userAccount.isActive()) {
                userProfile.inActive();
            }
            mongoTemplate.save(userProfile);

            //XXX TODO think about moving this up in previous method call
            updateUserIdWithEmailWhenPresent(userAccount, userProfile);
        } catch (IllegalAccessException | InvocationTargetException e) {
            log.error(e.getLocalizedMessage());
        }
    }

    private void copyAndSaveGoogleToUserProfile(Person googleUserProfile, UserAccountEntity userAccount) {
        log.debug("copying googleUserProfile to userProfile for userAccount={}", userAccount.getReceiptUserId());
        UserProfileEntity userProfile = mongoTemplate.findOne(
                query(where("UID").is(googleUserProfile.getId())),
                UserProfileEntity.class
        );
        if(userProfile == null) {
            userProfile = new UserProfileEntity();
        } else {
            userProfile.setUpdated();
        }

        String id = userProfile.getId();

        userProfile.setFirstName(googleUserProfile.getGivenName());
        userProfile.setLastName(googleUserProfile.getFamilyName());
        userProfile.setName(googleUserProfile.getDisplayName());
        userProfile.setLink(googleUserProfile.getUrl());
        //skipped thumbnailURL; this can be found in user account entity
        userProfile.setBirthday(googleUserProfile.getBirthday() == null ? null : googleUserProfile.getBirthday().toString());
        userProfile.setGender(googleUserProfile.getGender() == null ? null : googleUserProfile.getGender());
        //skipped occupation
        userProfile.setAbout(googleUserProfile.getAboutMe() == null ? null : googleUserProfile.getAboutMe());
        userProfile.setRelationshipStatus(googleUserProfile.getRelationshipStatus() == null ? null : googleUserProfile.getRelationshipStatus());
        //skipped urls
        if(googleUserProfile.getOrganizations() != null) {
            for(Organization organization : googleUserProfile.getOrganizations()) {
                Reference reference  = new Reference(organization.getName());
                WorkEntry workEntry = new WorkEntry(
                        reference,
                        organization.getStartDate(),
                        organization.getEndDate()
                );
                userProfile.addWork(workEntry);
            }
        }

        if(googleUserProfile.getPlacesLived() != null) {
            for (String value : googleUserProfile.getPlacesLived().keySet()) {
                if(googleUserProfile.getPlacesLived().get(value)) {
                    Reference reference  = new Reference(value);
                    userProfile.setLocation(reference);
                }
            }
        }
        userProfile.setEmail(googleUserProfile.getAccountEmail());

        //same as facebook from here
        userProfile.setUserId(googleUserProfile.getId());
        userProfile.setProviderId(ProviderEnum.GOOGLE);
        userProfile.setReceiptUserId(userAccount.getReceiptUserId());
        userProfile.setId(id);
        if(userAccount.isActive()) {
            userProfile.active();
        }

        if(!userAccount.isActive()) {
            userProfile.inActive();
        }
        mongoTemplate.save(userProfile);

        //XXX TODO think about moving this up in previous method call
        updateUserIdWithEmailWhenPresent(userAccount, userProfile);
    }

    /**
     * Replaces userId number with email if exists. Social providers provides Id when email is not shared.
     * @param userAccount
     * @param userProfile
     */
    private void updateUserIdWithEmailWhenPresent(UserAccountEntity userAccount, UserProfileEntity userProfile) {
        if(StringUtils.isNotBlank(userProfile.getEmail())) {
            log.debug("about to update userId={} with email={}", userAccount.getUserId(), userProfile.getEmail());
            userAccount.setUserId(userProfile.getEmail());
            mongoTemplate.save(userAccount);
        }
    }

    public void remove(String userId, ConnectionKey connectionKey) {
        Query q = query(where("UID").is(userId)
                .and("PID").is(connectionKey.getProviderId())
                .and("PUID").is(connectionKey.getProviderUserId()));
        mongoTemplate.remove(q, UserAccountEntity.class);
    }

    public void remove(String userId, ProviderEnum providerId) {
        Query q = query(where("UID").is(userId).and("PID").is(providerId));
        mongoTemplate.remove(q, UserAccountEntity.class);
    }

    public Connection<?> getPrimaryConnection(String userId, ProviderEnum providerId) {
        Query q = query(where("UID").is(userId).and("PID").is(providerId).and("RE").is(RoleEnum.ROLE_USER));
        UserAccountEntity mc = mongoTemplate.findOne(q, UserAccountEntity.class);
        return connectionConverter.convert(mc);
    }

    public Connection<?> getConnection(String userId, ProviderEnum providerId, String providerUserId) {
        UserAccountEntity mc = getUserAccountEntity(userId, providerId, providerUserId);
        return connectionConverter.convert(mc);
    }

    private UserAccountEntity getUserAccountEntity(String userId, ProviderEnum providerId, String providerUserId) {
        Query q = query(where("UID").is(userId).and("PID").is(providerId).and("PUID").is(providerUserId));
        return mongoTemplate.findOne(q, UserAccountEntity.class);
    }

    public List<Connection<?>> getConnections(String userId) {
        // select where userId = ? order by providerId, role
        Query q = query(where("UID").is(userId));
        Sort sort = new Sort(Sort.Direction.ASC, "PID").and(new Sort(Sort.Direction.ASC, "RE"));
        return runQuery(q.with(sort));
    }

    public List<Connection<?>> getConnections(String userId, ProviderEnum providerId) {
        Query q = query(where("userId").is(userId).and("PID").is(providerId));
        Sort sort = new Sort(Sort.Direction.ASC, "RE");
        return runQuery(q.with(sort));
    }

    public List<Connection<?>> getConnections(String userId, MultiValueMap<String, String> providerUsers) {
        if(providerUsers == null || providerUsers.isEmpty()) {
            throw new IllegalArgumentException("Unable to execute find: no providerUsers provided");
        }

        List<Criteria> lc = new ArrayList<>();
        for(Entry<String, List<String>> entry : providerUsers.entrySet()) {
            String providerId = entry.getKey();
            lc.add(where("PID").is(providerId).and("PUID").in(entry.getValue()));
        }

        Query query = query(where("UID").is(userId).orOperator(lc.toArray(new Criteria[lc.size()])));
        Sort sort = new Sort(Sort.Direction.ASC, "PID").and(new Sort(Sort.Direction.ASC, "RE"));
        return runQuery(query.with(sort));
    }

    public Set<String> getUserIds(ProviderEnum providerId, Set<String> providerUserIds) {
        Query q = query(where("PID").is(providerId).and("PUID").in(new ArrayList<>(providerUserIds)));
        q.fields().include("UID");

        List<UserAccountEntity> results = mongoTemplate.find(q, UserAccountEntity.class);
        Set<String> userIds = new HashSet<>();
        for(UserAccountEntity mc : results) {
            userIds.add(mc.getUserId());
        }
        return userIds;
    }

    public List<String> getUserIds(ProviderEnum providerId, String providerUserId) {
        Query q = query(where("PID").is(providerId).and("PUID").is(providerUserId));
        q.fields().include("UID");

        List<UserAccountEntity> results = mongoTemplate.find(q, UserAccountEntity.class);
        List<String> userIds = new ArrayList<>();
        for(UserAccountEntity mc : results) {
            userIds.add(mc.getUserId());
        }
        return userIds;
    }

    private List<Connection<?>> runQuery(Query query) {
        List<UserAccountEntity> results = mongoTemplate.find(query, UserAccountEntity.class);
        List<Connection<?>> l = new ArrayList<>();
        for(UserAccountEntity mc : results) {
            l.add(connectionConverter.convert(mc));
        }
        return l;
    }
}