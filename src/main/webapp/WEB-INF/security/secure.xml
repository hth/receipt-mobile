<beans:beans xmlns:beans="http://www.springframework.org/schema/beans"
             xmlns="http://www.springframework.org/schema/security"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xsi:schemaLocation="http://www.springframework.org/schema/beans
             http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
             http://www.springframework.org/schema/security
             http://www.springframework.org/schema/security/spring-security-3.2.xsd">

    <!--<debug />-->

    <global-method-security mode="aspectj"
                            jsr250-annotations="enabled"
                            pre-post-annotations="enabled"
                            secured-annotations="enabled" />

    <http pattern="/static/**" security="none"/>

    <http entry-point-ref="restAuthenticationEntryPoint" create-session="ifRequired">
        <intercept-url pattern="/admin/**" access="ROLE_ADMIN"/>
        <intercept-url pattern="/access/**" access="ROLE_USER"/>

        <form-login authentication-success-handler-ref="onLoginSuccessHandler"
                    authentication-failure-handler-ref="myFailureHandler" />

        <logout logout-success-url="/"
                delete-cookies="JSESSIONID"
                invalidate-session="true" />

        <!--session-fixation-protection="migrateSession"-->
        <session-management invalid-session-url="/">
            <concurrency-control max-sessions="5"
                                 error-if-maximum-exceeded="true"
                                 expired-url="/" />
        </session-management>
    </http>

    <!--<beans:bean id="mySuccessHandler" class="com.receiptofi.mobile.security.OnLoginSimpleUrlAuthenticationSuccessHandler"/>-->
    <beans:bean id="myFailureHandler" class="org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler"/>

    <beans:bean id="onLoginSuccessHandler" class="com.receiptofi.security.OnLoginAuthenticationSuccessHandler" />

    <!-- Declare an authentication-manager to use a custom userDetailsService -->
    <authentication-manager>
        <authentication-provider user-service-ref="customUserDetailsService">
            <password-encoder ref="passwordEncoder"/>
        </authentication-provider>
    </authentication-manager>

    <!-- Use a BCrypt encoder since the user's passwords are stored as BCrypt in the database -->
    <beans:bean class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder" id="passwordEncoder"/>
</beans:beans>