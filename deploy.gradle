if (!hasProperty('env')) {
    ext.env = System.env['GRADLE_ENV']
}

println "Building for environment: $env"

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'org.hidetake:gradle-ssh-plugin:2.7.0'
    }
}

apply plugin: 'org.hidetake.ssh'

ssh.settings {
    dryRun = false
    logging = 'stdout'
    timeoutSec = 600000
    identity = file("${System.properties['user.home']}/.ssh/id_rsa")
}

remotes {
    r1 {
        host = '192.168.1.20'
        user = 'db'
    }
    r2 {
        host = '192.168.1.22'
        user = 'db'
    }
    r3 {
        host = '192.168.1.21'
        user = 'db'
    }
    r4 {
        host = '192.168.1.23'
        user = 'db'
    }
}

task deployServer {
    if (env == 'sandbox') {
        deploy(remotes.r1, "$env", "ROOT-$env.*.war", "receipt-mobile-$env.*.war")
        deploy(remotes.r2, "$env", "ROOT-$env.*.war", "receipt-mobile-$env.*.war")
        deploy(remotes.r3, "$env", "ROOT-$env.*.war", "receipt-mobile-$env.*.war")
        deploy(remotes.r4, "$env-loader", "ROOT-loader-$env.*.war", "receipt-mobile-$env.*.war")
    }
}

task stopServer {
    logger.lifecycle("Stop $server on $env")
    if (env == 'sandbox') {
        sshExecute(remotes.r1, 'sudo service tomcat stop')
        sshExecute(remotes.r2, 'sudo service tomcat stop')
        sshExecute(remotes.r3, 'sudo service tomcat stop')
        sshExecute(remotes.r4, 'sudo service tomcat stop')
        sshExecute(server, 'sleep 20')
    }
}

task startServer {
    logger.lifecycle("Start $server on $env")
    if (env == 'sandbox') {
        sshExecute(server, 'sleep 20')
        sshExecute(remotes.r1, 'sudo service tomcat start')
        sshExecute(remotes.r2, 'sudo service tomcat start')
        sshExecute(remotes.r3, 'sudo service tomcat start')
        sshExecute(remotes.r4, 'sudo service tomcat start')
    }
}

def deploy(def server, def path, def rootFile, def mobileFile) {
    logger.lifecycle("Deploying to $server for $env")

    sshExecute(server, 'sudo service tomcat stop')
    sshExecute(server, 'sleep 20')
    sshExecute(server, 'cd /usr/local/tomcat/webapps/; rm -rf *')
    copyFiles(server, "/Users/Shared/Jenkins/Home/jobs/receiptofi-$env-build/workspace/build/war/$path/$rootFile")
    copyFiles(server, "/Users/Shared/Jenkins/Home/jobs/receiptofi.mobile-$env-build/workspace/build/war/$env/$mobileFile")
    sshExecute(server,  "cd /usr/local/tomcat/webapps/; mv $rootFile ROOT.war")
    sshExecute(server,  "cd /usr/local/tomcat/webapps/; mv $mobileFile receipt-mobile.war")

    sshExecute(server, 'sudo service tomcat start')
    sshExecute(server, 'sleep 20')
    sshExecute(server, 'sudo service tomcat status')
}

def sshExecute(def server, def cmd) {
    logger.lifecycle("Executing '$cmd'  ...")
    ssh.run {
        session(server) {
            execute(cmd, pty: false)
        }
    }
}

def copyFiles(def server, def filePath) {
    logger.lifecycle("Copying $filePath to $server ... Be patient .. takes time ...")
    ssh.run {
        session(server) {
            put from: files("$filePath"), into: "/usr/local/tomcat/webapps/"
        }
    }
}