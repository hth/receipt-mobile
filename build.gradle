if (!hasProperty('env')) {
    ext.env = System.env['GRADLE_ENV']
}

ext {
    webInf = file('/WEB-INF')
    lib = file("$webInf/lib")
    classes = file("$webInf/classes")
    conf = file("$classes/conf")
    images = file("$classes/images")

    warDir = file("$buildDir/explodedWar/$env")
    warWebInfDir = file("$warDir$webInf")
    warLibDir = file("$warDir$lib")
    warClassesDir = file("$warDir$classes")
    warConfDir = file("$warDir$conf")
    warWebInfClassesImagesDir = file("$warDir$images")

    unzipDir = file("${buildDir}/unpacked/dist")
    unzipLibDir = file("$unzipDir$lib")

    springGroup = 'org.springframework'
    springVersion = '4.1.1.RELEASE'

    springSecurityGroup = 'org.springframework.security'
    springSecurityVersion = '3.2.5.RELEASE'

    springDataGroup = 'org.springframework.data'
}

allprojects {
    group = 'com.receiptofi.mobile'
    version = '0.9.0'
}

subprojects {
    apply plugin: 'idea'
    apply plugin: 'java'

    apply plugin: 'checkstyle'  //for java code conventions, you can use sonar instead but it need DB
    apply plugin: 'findbugs'    //for static code analysis
    apply plugin: 'jdepend'     //for dependency analysis, Jenkins plugin does not use this feature
    apply plugin: 'pmd'
    apply plugin: 'jacoco'      //for code coverage

    sourceCompatibility = 1.7
    targetCompatibility = 1.7

    checkstyle {
        ignoreFailures = true
    }

    findbugs {
        toolVersion = "3.0.0"
        ignoreFailures = true
        reportsDir = file("$project.buildDir/reports/findbugs")
        effort = "max"
        reportLevel = "medium"
        visitors = ["FindSqlInjection", "SwitchFallthrough"]
        omitVisitors = ["FindNonShortCircuit"]
//        includeFilter = file("$rootProject.projectDir/config/findbugs/includeFilter.xml")
//        excludeFilter = file("$rootProject.projectDir/config/findbugs/excludeFilter.xml")
    }

    jdepend {
        ignoreFailures = true
        reportsDir = file("$project.buildDir/reports/jdepend")
    }

    pmd {
        ignoreFailures = true

        ruleSets = [
                "java-basic",
                "java-braces",
                "java-naming",
                "java-android",
                "java-clone",
                "java-codesize",
                "java-controversial",
                "java-design",
                "java-finalizers",
                "java-imports",
                "java-j2ee",
                "java-javabeans",
                "java-junit",
                "java-migrating",
                "java-optimizations",
                "java-strictexception",
                "java-strings",
                "java-sunsecure",
                "java-typeresolution",
                "java-unusedcode"
        ]
    }

    jar {
        manifest {
            attributes(
                    "Implementation-Vendor": "Receiptofi Inc",
                    "Implementation-Title": rootProject.name,
                    "Implementation-Version": allprojects.version + " $env",
                    "Copyright" : "2012-2014, Receiptofi Inc"
            )
        }
    }

    idea {
        module {
            downloadSources = true
            downloadJavadoc = false
        }
    }

    repositories {
        mavenLocal()
        mavenCentral()
        maven { url "http://repo.spring.io/libs-milestone" }
        maven { url "http://repo1.maven.org/maven2/" }
    }

    dependencies {
        compile 'com.receiptofi:common:0.9.0'
        compile 'com.receiptofi:domain:0.9.0'
        compile 'com.receiptofi:service:0.9.0'
        compile 'com.receiptofi:social:0.9.0'

        compile files('../lib/spring-social-core-1.1.0.RELEASE.jar')
        compile files('../lib/spring-social-facebook-1.1.1.RELEASE.jar')
        compile files('../lib/spring-social-google-1.0.0.RELEASE.jar')
        compile files('../lib/spring-social-security-1.1.0.RELEASE.jar')
        compile files('../lib/spring-social-web-1.1.0.RELEASE.jar')
        compile files('../lib/geronimo-j2ee-management_1.1_spec-1.0.1.jar')
        compile files('../lib/geronimo-jms_1.1_spec-1.1.1.jar')

        compile "$springGroup:spring-aop:$springVersion"
        compile "$springGroup:spring-aspects:$springVersion"
        compile "$springGroup:spring-beans:$springVersion"
        compile "$springGroup:spring-context:$springVersion"
        compile "$springGroup:spring-context-support:$springVersion"
        compile "$springGroup:spring-core:$springVersion"
        compile "$springGroup:spring-expression:$springVersion"
        compile "$springGroup:spring-instrument:$springVersion"
        compile "$springGroup:spring-instrument-tomcat:$springVersion"
        compile "$springGroup:spring-jms:$springVersion"
        compile "$springGroup:spring-oxm:$springVersion"
        compile "$springGroup:spring-test:$springVersion"
        compile "$springGroup:spring-tx:$springVersion"
        compile "$springGroup:spring-web:$springVersion"
        compile "$springGroup:spring-webmvc:$springVersion"

        compile "$springSecurityGroup:spring-security-aspects:$springSecurityVersion"
        compile "$springSecurityGroup:spring-security-config:$springSecurityVersion"
        compile "$springSecurityGroup:spring-security-core:$springSecurityVersion"
        compile "$springSecurityGroup:spring-security-crypto:$springSecurityVersion"
        compile "$springSecurityGroup:spring-security-taglibs:$springSecurityVersion"
        compile "$springSecurityGroup:spring-security-web:$springSecurityVersion"

        //1.5.2 has a problem of loading object based on Id and requires new Object Id
        compile "$springDataGroup:spring-data-mongodb:1.5.0.RELEASE"
        compile "$springDataGroup:spring-data-commons:1.8.2.RELEASE"
        compile 'org.mongodb:mongo-java-driver:2.12.3'

        compile 'org.apache.commons:commons-collections4:4.0'
        compile 'org.apache.commons:commons-lang3:3.3.2'

        compile 'aopalliance:aopalliance:1.0'
        compile 'org.aspectj:aspectjrt:1.7.4'
        compile 'com.fasterxml:classmate:1.0.0'
        compile 'org.slf4j:slf4j-api:1.7.7'
        compile 'org.hibernate:hibernate-validator:5.1.1.Final'
        compile 'joda-time:joda-time:2.3'
        compile 'com.google.guava:guava:17.0'
        compile 'javax.mail:mail:1.4.7'
        compile 'org.freemarker:freemarker:2.3.20'
        compile 'commons-validator:commons-validator:1.4.0'
        compile 'com.google.code.gson:gson:2.2.4'
        compile 'commons-io:commons-io:2.4'
        compile 'org.apache.poi:poi:3.10-FINAL'
        compile 'commons-codec:commons-codec:1.9'
        compile 'commons-logging:commons-logging:1.1.3'
        compile 'com.googlecode.libphonenumber:libphonenumber:6.0'
        compile 'com.fasterxml.jackson.core:jackson-annotations:2.4.2'
        compile 'com.fasterxml.jackson.core:jackson-core:2.4.2'
        compile 'com.fasterxml.jackson.core:jackson-databind:2.4.2'
        compile 'org.codehaus.jackson:jackson-core-asl:1.9.13'
        compile 'org.codehaus.jackson:jackson-mapper-asl:1.9.13'

        compile 'com.googlecode.owasp-java-html-sanitizer:owasp-java-html-sanitizer:r232'
        compile 'javax.validation:validation-api:1.1.0.Final'
        compile 'org.hibernate:hibernate-validator:5.1.1.Final'
        compile 'commons-fileupload:commons-fileupload:1.3.1'
        compile 'commons-io:commons-io:2.4'
        compile 'javax.inject:javax.inject:1'
        compile 'org.apache.activemq:activemq-client:5.10.0'
        compile 'javax.mail:mail:1.4.7'
        compile 'org.apache.commons:commons-lang3:3.3.2'

        compile 'org.apache.httpcomponents:httpclient:4.3.4'

        compile 'ch.qos.logback:logback-core:1.1.2'
        compile 'ch.qos.logback:logback-classic:1.1.2'
        compile 'net.logstash.logback:logstash-logback-encoder:3.1'
        compile 'net.bull.javamelody:javamelody-core:1.+'

        compile 'net.sf.uadetector:uadetector-core:0.9.16'
        compile 'net.sf.uadetector:uadetector-resources:2014.04'

        compile 'javax.validation:validation-api:1.1.0.Final'

        testCompile group: 'junit', name: 'junit', version: '4.+'
        testCompile 'org.mockito:mockito-all:1.9.5'
        testCompile 'de.flapdoodle.embed:de.flapdoodle.embed.mongo:1.46.1'
    }

    test {
        // set heap size for the test JVM(s)
        minHeapSize = "128m"
        maxHeapSize = "512m"

        // set JVM arguments for the test JVM(s)
        jvmArgs '-XX:MaxPermSize=256m'

        // listen to events in the test execution lifecycle
        beforeTest { descriptor ->
            logger.lifecycle("Running test: " + descriptor)
        }

        // listen to standard out and standard error of the test JVM(s)
        onOutput { descriptor, event ->
            logger.lifecycle("Test: " + descriptor + " produced standard out/err: " + event.message )
        }

        testLogging {
            showStandardStreams = true

            // set options for log level LIFECYCLE
            events "failed"
            exceptionFormat "short"

            // set options for log level DEBUG
            debug {
                events "started", "skipped", "failed"
                exceptionFormat "full"
            }

            // remove standard output/error logging from --info builds
            // by assigning only 'failed' and 'skipped' events
            info.events = ["failed", "skipped"]

            // Disable the test report for the individual test task
            reports.html.enabled = false
        }
    }

    tasks.withType(FindBugs) {
        reports {
            xml.enabled = true
            html.enabled = false
        }
    }

    tasks.withType(JDepend) {
        reports {
            xml.enabled = true
            text.enabled = false
        }
    }

    tasks.withType(Pmd) {
        reports {
            xml.enabled = true
            html.enabled = true
        }
    }
}

project(':common') {
    jar.baseName = 'receiptofi.mobile-common'
}

project(':domain') {
    jar.baseName = 'receiptofi.mobile-domain'

    dependencies {
        compile project(':common')
    }
}

project(':security') {
    apply plugin: 'war'
    jar.baseName = 'receiptofi.mobile-security'

    repositories {
        mavenCentral()
    }

    dependencies {
        compile project(':common'), project(':domain')

        providedCompile 'javax.servlet:javax.servlet-api:3.1.+'
        runtime 'javax.servlet:jstl:1.+'
    }
}

project(':service') {
    jar.baseName = 'receiptofi.mobile-service'

    dependencies {
        compile project(':common'), project(':domain')
    }
}

project(':web') {
    apply plugin: 'war'
    jar.baseName = 'receiptofi.mobile-web'
    war.baseName = 'receiptofi.mobile-web'

    repositories {
        mavenCentral()
    }

    dependencies {
        compile project(':common'), project(':domain'), project(':security'), project(':service')

        providedCompile 'javax.servlet:javax.servlet-api:3.1.+'
        runtime 'javax.servlet:jstl:1.+'
    }
}


task wrapper(type: Wrapper){
    gradleVersion = '2.1'
}

task copyJars(type: Copy) {
    from 'common/build/libs'
    from 'domain/build/libs'
    from 'security/build/libs'
    from 'service/build/libs'
    from 'web/build/libs'
    into warLibDir
    include '**/*.jar'
}

task unzip(type: Copy, dependsOn: [':web:war']) {
    def zipFile = file('web/build/libs/receiptofi.mobile-web-0.9.0.war')

    from zipTree(zipFile)
    into unzipDir
}

task prepWar(dependsOn: [unzip, copyJars]) << {
    warClassesDir.mkdirs()
    warConfDir.mkdirs()

    copy {
        from 'web/web'
        into warDir
        exclude '**/*.classes'
    }

    copy {
        from file("web/environment/$env/$env" + ".properties")
        into warConfDir
    }

    copy {
        from "web/environment/$env/logback.xml"
        from 'web/resources/conf/messages.properties'
        into warClassesDir
    }

    copy {
        from "web/environment/$env/receipt-mobile-servlet.xml"
        into warWebInfDir
    }

    copy {
        from 'web/web/static/images'
        into warWebInfClassesImagesDir
    }

    copy {
        from unzipLibDir
        into warLibDir
    }
}

task clean(type: Delete) {
    delete buildDir
}

task war(type: War, dependsOn: prepWar) {
    doFirst {
        if (env == 'test' || env == 'prod') {
            // This adds escape character to message.properties; if you would like to avoid updating file at runtime
            // then create a new file 'versionFile.name' in your favorite location and add the new file as below
            //
            // from(rootDir) {
            //      include versionFile.name
            // }

            ant.propertyfile(file: "$warDir/WEB-INF/classes/messages.properties") {
                entry(key: "build.version", value: System.getenv().BUILD_NUMBER?.toInteger())
            }

            baseName = "receipt-mobile-$env." + System.getenv().BUILD_NUMBER?.toInteger()
        }

        if (env == 'dev') {
            ant.propertyfile(file: "$warDir/WEB-INF/classes/messages.properties") {
                entry(key: "build.version", value: 'dev')
            }

            baseName = "receipt-mobile-$env"
        }
    }

    from warDir
    version ""
    destinationDir = file("$buildDir/war/$env")
}

task testReport(type: TestReport) {
    destinationDir = file("$buildDir/reports/allTests")
    // Include the results from the `test` task in all subprojects
    reportOn subprojects*.test

    doLast {
        println "Test reports for all test complete"
    }
}

defaultTasks 'clean', 'build', 'jar', 'war', 'testReport'
